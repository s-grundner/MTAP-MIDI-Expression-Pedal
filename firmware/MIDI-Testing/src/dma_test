#include "config.h"

static const char* TAG = "dma_test";

typedef struct
{
	QueueHandle_t sampling_queue;
	size_t* audio_buffer_pos;
	size_t* current_audio_buffer;
} i2s_sampler_t;

static void sampler_task(void* arg)
{
	i2s_sampler_t* sampler = (i2s_sampler_t*)arg;
	for (;;)
	{
		i2s_event_t evt;
		if (xQueueReceive(sampler->sampling_queue, &evt, portMAX_DELAY) == pdTRUE)
		{
			if (evt.type == I2S_EVENT_RX_DONE)
			{
				size_t bytes_read = 0;
				do
				{
					// fill audio buffer
					size_t bytes_to_read = 2 * (ADC_SAMPLES_COUNT - *sampler->audio_buffer_pos);
					void* buffer_position = (void*)(sampler->current_audio_buffer + *sampler->audio_buffer_pos);

					// read data from i2s 
					i2s_read(I2S_NUM_0, buffer_position, bytes_to_read, &bytes_read, 1000 / portTICK_PERIOD_MS);
					*sampler->audio_buffer_pos += bytes_read / 2;

					if (*sampler->audio_buffer_pos >= ADC_SAMPLES_COUNT)
					{
						// send data to DSP queue
						*sampler->audio_buffer_pos = 0;
						ESP_LOGI(TAG, "Audio buffer sent to DSP queue");
					}

				} while (bytes_read > 0);

				// read data from DMA buffer
				// send data to DSP queue
			}
		}
	}
}
void app_main(void)
{

	// ------------------------------------------------------------
	// SETUP SAMPLER
	// ------------------------------------------------------------

	ESP_LOGI(TAG, "Initializing I2S Sampler...");

	i2s_sampler_t sampler = {
		.current_audio_buffer = (size_t*)malloc(ADC_SAMPLES_COUNT * sizeof(size_t)),
		.audio_buffer_pos = (size_t*)malloc(sizeof(size_t)),
	};

	i2s_config_t i2s_cfg = {
		.mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX | I2S_MODE_ADC_BUILT_IN),
		.sample_rate = 10000,
		.bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
		.channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
		.communication_format = I2S_COMM_FORMAT_STAND_I2S,
		.intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
		.dma_buf_count = 4,
		.dma_buf_len = 1024,
		.use_apll = false,
		.fixed_mclk = 0 };

	// Initialize ADC
	ESP_ERROR_CHECK(i2s_driver_install(I2S_NUM_0, &i2s_cfg, 4, &sampler.sampling_queue));
	ESP_ERROR_CHECK(i2s_set_adc_mode((adc_unit_t)INTERNAL_ADC_UNIT, (adc1_channel_t)INTERNAL_ADC));
	ESP_ERROR_CHECK(i2s_adc_enable(I2S_NUM_0));

	// DMA task: receives audio data from ADC and sends it to DSP task
	TaskHandle_t sampler_task_handle;
	if (xTaskCreatePinnedToCore(sampler_task, "reader_task", 8192, &sampler, 5, &sampler_task_handle, 0) == pdFALSE)
		return ESP_ERR_NO_MEM;
}