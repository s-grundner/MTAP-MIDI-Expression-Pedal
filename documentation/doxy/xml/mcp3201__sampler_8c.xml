<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="mcp3201__sampler_8c" kind="file" language="C++">
    <compoundname>mcp3201_sampler.c</compoundname>
    <includes refid="mcp3201_8h" local="yes">mcp3201.h</includes>
    <incdepgraph>
      <node id="2">
        <label>mcp3201.h</label>
        <link refid="mcp3201_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c</label>
        <link refid="mcp3201__sampler_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>driver/gpio.h</label>
      </node>
      <node id="8">
        <label>driver/spi_master.h</label>
      </node>
      <node id="10">
        <label>esp_log.h</label>
      </node>
      <node id="4">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="6">
        <label>freertos/queue.h</label>
      </node>
      <node id="5">
        <label>freertos/task.h</label>
      </node>
      <node id="9">
        <label>hal/spi_types.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmcp3201__context__t" prot="public">mcp3201_context_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="mcp3201__sampler_8c_1a828111412830c4436552027ba36cfcad" prot="public" static="no">
        <name>RESAMPLE_DIVIDER</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" line="3" column="9" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" bodystart="3" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mcp3201__sampler_8c_1a4f85605dc744cf7ad2f8283b2af38f3f" prot="public" static="no">
        <name>READER_TIMEOUT_MS</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" line="4" column="9" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" bodystart="4" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mcp3201__sampler_8c_1a89218c3a1a1e133c6bee85aa1d79acae" prot="public" static="no">
        <name>READER_TIMEOUT_TICKS</name>
        <initializer>(READER_TIMEOUT_MS / portTICK_PERIOD_MS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" line="5" column="9" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" bodystart="5" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="mcp3201__sampler_8c_1a5b6eb8ead610fcf3be79b9922131cf40" prot="public" static="no">
        <type>struct <ref refid="structmcp3201__context__t" kindref="compound">mcp3201_context_t</ref></type>
        <definition>typedef struct mcp3201_context_t mcp3201_context_t</definition>
        <argsstring></argsstring>
        <name>mcp3201_context_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" line="14" column="32" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="mcp3201__sampler_8c_1a5a85b9c772bbeb480b209a3e6ea92b4c" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* TAG</definition>
        <argsstring></argsstring>
        <name>TAG</name>
        <initializer>= &quot;MCP3201_SAMPLER&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" line="7" column="19" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mcp3201__sampler_8c_1a408012191feb8f662616d50eef5d3f18" prot="public" static="yes" mutable="no">
        <type>TaskHandle_t</type>
        <definition>TaskHandle_t sampler_task_handle</definition>
        <argsstring></argsstring>
        <name>sampler_task_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" line="16" column="21" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mcp3201__sampler_8c_1ae554805513d6f3a5cfb0cb3ae50e13ea" prot="public" static="yes" mutable="no">
        <type>TaskHandle_t</type>
        <definition>TaskHandle_t reader_task_handle</definition>
        <argsstring></argsstring>
        <name>reader_task_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" line="17" column="21" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="mcp3201__sampler_8c_1aac9c6fe4e61110c03a89744928cd0934" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void IRAM_ATTR</type>
        <definition>static void IRAM_ATTR sampler_task</definition>
        <argsstring>(void *arg)</argsstring>
        <name>sampler_task</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" line="19" column="23" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" bodystart="19" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="mcp3201__sampler_8c_1a0a22e2131a1ade93dde9432d418c45b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void IRAM_ATTR</type>
        <definition>static void IRAM_ATTR reader_task</definition>
        <argsstring>(void *arg)</argsstring>
        <name>reader_task</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" line="63" column="23" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" bodystart="63" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="mcp3201__sampler_8c_1a597661bdfb234321b4ba0648dc161451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmcp3201__sampler__t" kindref="compound">mcp3201_sampler_t</ref> *</type>
        <definition>mcp3201_sampler_t * mcp3201_sampler_start</definition>
        <argsstring>(mcp3201_handle_t mcp_handle, QueueHandle_t recv_queue, const size_t buffer_size, const size_t f_sample)</argsstring>
        <name>mcp3201_sampler_start</name>
        <param>
          <type><ref refid="structmcp3201__context__t" kindref="compound">mcp3201_handle_t</ref></type>
          <declname>mcp_handle</declname>
        </param>
        <param>
          <type>QueueHandle_t</type>
          <declname>recv_queue</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>buffer_size</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>f_sample</declname>
        </param>
        <briefdescription>
<para>Starts the MCP3201 Sampler, which samples continuously and puts the samples into a queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mcp_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MCP3201 Device Handler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recv_queue</parametername>
</parameternamelist>
<parameterdescription>
<para>queue to send the samples into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the audio buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f_sample</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample rate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>mcp3201_sampler_t* Sampler Handler </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" line="74" column="19" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" bodystart="74" bodyend="98"/>
        <references refid="mcp3201_8h_1a597661bdfb234321b4ba0648dc161451" compoundref="mcp3201__sampler_8c" startline="74" endline="98">mcp3201_sampler_start</references>
        <referencedby refid="mcp3201_8h_1a597661bdfb234321b4ba0648dc161451" compoundref="mcp3201__sampler_8c" startline="74" endline="98">mcp3201_sampler_start</referencedby>
      </memberdef>
      <memberdef kind="function" id="mcp3201__sampler_8c_1a09942c72d6880306a561ca69a5ecac80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mcp3201_sampler_stop</definition>
        <argsstring>(mcp3201_sampler_t *sampler)</argsstring>
        <name>mcp3201_sampler_stop</name>
        <param>
          <type><ref refid="structmcp3201__sampler__t" kindref="compound">mcp3201_sampler_t</ref> *</type>
          <declname>sampler</declname>
        </param>
        <briefdescription>
<para>Stops the MCP3201 Sampler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sampler</parametername>
</parameternamelist>
<parameterdescription>
<para>Sampler Handler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" line="100" column="6" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c" bodystart="100" bodyend="112"/>
        <references refid="mcp3201_8h_1a09942c72d6880306a561ca69a5ecac80" compoundref="mcp3201__sampler_8c" startline="100" endline="112">mcp3201_sampler_stop</references>
        <referencedby refid="gitcon_8c_1a34f972a4c96245ce63d26a5256c75e24" compoundref="gitcon_8c" startline="217" endline="235">gitcon_exit</referencedby>
        <referencedby refid="mcp3201_8h_1a09942c72d6880306a561ca69a5ecac80" compoundref="mcp3201__sampler_8c" startline="100" endline="112">mcp3201_sampler_stop</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mcp3201_8h" kindref="compound">mcp3201.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RESAMPLE_DIVIDER<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>READER_TIMEOUT_MS<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>READER_TIMEOUT_TICKS<sp/>(READER_TIMEOUT_MS<sp/>/<sp/>portTICK_PERIOD_MS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TAG<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;MCP3201_SAMPLER&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmcp3201__context__t" kindref="compound">mcp3201_context_t</ref></highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmcp3201__config__t" kindref="compound">mcp3201_config_t</ref><sp/>cfg;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>spi_device_handle_t<sp/>spi;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>spi_transaction_t<sp/>*ongoing_transaction;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmcp3201__context__t" kindref="compound">mcp3201_context_t</ref><sp/><ref refid="structmcp3201__context__t" kindref="compound">mcp3201_context_t</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TaskHandle_t<sp/>sampler_task_handle;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TaskHandle_t<sp/>reader_task_handle;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>IRAM_ATTR<sp/>sampler_task(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmcp3201__sampler__t" kindref="compound">mcp3201_sampler_t</ref><sp/>*sampler<sp/>=<sp/>(<ref refid="structmcp3201__sampler__t" kindref="compound">mcp3201_sampler_t</ref><sp/>*)arg;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spi_event_t<sp/>evt;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xQueueReceive(sampler-&gt;dma_queue,<sp/>&amp;evt,<sp/>portMAX_DELAY)<sp/>==<sp/>pdTRUE)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(evt<sp/>==<sp/>SPI_EV_SEND_DMA_READY)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_read<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>audio<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_to_read<sp/>=<sp/>RESAMPLE_DIVIDER<sp/>*<sp/>(sampler-&gt;buffer_size<sp/>-<sp/>sampler-&gt;buffer_pos);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer_position<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(sampler-&gt;buffer<sp/>+<sp/>sampler-&gt;buffer_pos);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>data<sp/>from<sp/>spi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spi_transaction_t<sp/>t<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.user<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)sampler-&gt;mcp_handle,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.length<sp/>=<sp/>bytes_to_read,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rx_buffer<sp/>=<sp/>buffer_position,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sampler-&gt;mcp_handle-&gt;ongoing_transaction<sp/>=<sp/>&amp;t;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spi_device_get_trans_result(</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sampler-&gt;mcp_handle-&gt;spi,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(spi_transaction_t<sp/>**)(sampler-&gt;mcp_handle-&gt;ongoing_transaction),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>READER_TIMEOUT_TICKS);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes_read<sp/>=<sp/>t.rxlength;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sampler-&gt;buffer_pos<sp/>+=<sp/>bytes_read<sp/>/<sp/>RESAMPLE_DIVIDER;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sampler-&gt;buffer_pos<sp/>==<sp/>sampler-&gt;buffer_size)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>data<sp/>to<sp/>DSP<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sampler-&gt;buffer_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xQueueSend(sampler-&gt;dsp_queue,<sp/>&amp;sampler-&gt;buffer,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bytes_read<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>IRAM_ATTR<sp/>reader_task(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmcp3201__sampler__t" kindref="compound">mcp3201_sampler_t</ref><sp/>*sampler<sp/>=<sp/>(<ref refid="structmcp3201__sampler__t" kindref="compound">mcp3201_sampler_t</ref><sp/>*)arg;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spi_device_queue_trans(sampler-&gt;mcp_handle-&gt;spi,<sp/>sampler-&gt;mcp_handle-&gt;ongoing_transaction,<sp/>portMAX_DELAY);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spi_event_t<sp/>evt<sp/>=<sp/>SPI_EV_SEND_DMA_READY;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xQueueSendFromISR(sampler-&gt;dma_queue,<sp/>&amp;evt,<sp/>NULL);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="mcp3201_8h_1a597661bdfb234321b4ba0648dc161451" refkind="member"><highlight class="normal"><ref refid="structmcp3201__sampler__t" kindref="compound">mcp3201_sampler_t</ref><sp/>*<ref refid="mcp3201_8h_1a597661bdfb234321b4ba0648dc161451" kindref="member">mcp3201_sampler_start</ref>(<ref refid="structmcp3201__context__t" kindref="compound">mcp3201_handle_t</ref><sp/>mcp_handle,<sp/>QueueHandle_t<sp/>recv_queue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffer_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>f_sample)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mcp_handle<sp/>==<sp/>NULL<sp/>||<sp/>recv_queue<sp/>==<sp/>NULL<sp/>||<sp/>buffer_size<sp/>==<sp/>0<sp/>||<sp/>f_sample<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>arguments&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmcp3201__sampler__t" kindref="compound">mcp3201_sampler_t</ref><sp/>*sampler<sp/>=<sp/>(<ref refid="structmcp3201__sampler__t" kindref="compound">mcp3201_sampler_t</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmcp3201__sampler__t" kindref="compound">mcp3201_sampler_t</ref>));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>*sampler<sp/>=<sp/>(<ref refid="structmcp3201__sampler__t" kindref="compound">mcp3201_sampler_t</ref>){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mcp_handle<sp/>=<sp/>mcp_handle,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.buffer_size<sp/>=<sp/>buffer_size,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.buffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>*<sp/>buffer_size),</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.buffer_pos<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dma_queue<sp/>=<sp/>xQueueCreate(4,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(spi_event_t)),</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dsp_queue<sp/>=<sp/>recv_queue};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(spi_device_acquire_bus(mcp_handle-&gt;spi,<sp/>portMAX_DELAY)<sp/>!=<sp/>ESP_OK)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(TAG,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>acquire<sp/>bus\n<sp/>retrying...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>xTaskCreatePinnedToCore(sampler_task,<sp/></highlight><highlight class="stringliteral">&quot;sampler_task&quot;</highlight><highlight class="normal">,<sp/>RESAMPLE_DIVIDER<sp/>*<sp/>buffer_size,<sp/>sampler,<sp/>5,<sp/>&amp;sampler_task_handle,<sp/>0);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>xTaskCreatePinnedToCore(reader_task,<sp/></highlight><highlight class="stringliteral">&quot;reader_task&quot;</highlight><highlight class="normal">,<sp/>2048,<sp/>sampler,<sp/>5,<sp/>&amp;reader_task_handle,<sp/>0);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sampler;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="mcp3201_8h_1a09942c72d6880306a561ca69a5ecac80" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mcp3201_8h_1a09942c72d6880306a561ca69a5ecac80" kindref="member">mcp3201_sampler_stop</ref>(<ref refid="structmcp3201__sampler__t" kindref="compound">mcp3201_sampler_t</ref><sp/>*sampler)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>vQueueDelete(sampler-&gt;dma_queue);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>vQueueDelete(sampler-&gt;dsp_queue);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>spi_device_release_bus(sampler-&gt;mcp_handle-&gt;spi);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(sampler_task_handle);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(reader_task_handle);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>free(sampler-&gt;buffer);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>free(sampler);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/mcp3201/mcp3201_sampler.c"/>
  </compounddef>
</doxygen>
