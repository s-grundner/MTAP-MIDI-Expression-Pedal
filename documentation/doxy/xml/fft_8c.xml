<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="fft_8c" kind="file" language="C++">
    <compoundname>fft.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">complex.h</includes>
    <includes refid="fft_8h" local="yes">fft.h</includes>
    <incdepgraph>
      <node id="1">
        <label>C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c</label>
        <link refid="fft_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>fft.h</label>
        <link refid="fft_8h_source"/>
      </node>
      <node id="5">
        <label>complex.h</label>
      </node>
      <node id="4">
        <label>math.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="fft_8c_1a3b947f4b635461030ff2d87833e5049e" prot="public" static="no">
        <name>TWO_PI</name>
        <initializer>6.28318530</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" line="9" column="9" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fft_8c_1a4818ced076eecee15519b676abbde6b9" prot="public" static="no">
        <name>USE_SPLIT_RADIX</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" line="10" column="9" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fft_8c_1a9f15cf3faf10a0df95445d7e7211d07f" prot="public" static="no">
        <name>LARGE_BASE_CASE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" line="11" column="9" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="fft_8c_1a99b7a87d5783b2727dac866314f2774d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfft__config__t" kindref="compound">fft_config_t</ref> *</type>
        <definition>fft_config_t * fft_init</definition>
        <argsstring>(int size, fft_type_t type, fft_direction_t direction, float *input, float *output)</argsstring>
        <name>fft_init</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>fft_type_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>fft_direction_t</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" line="13" column="14" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" bodystart="13" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="fft_8c_1a0532ef3e893952fd108b183d5a14cd0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fft_destroy</definition>
        <argsstring>(fft_config_t *config)</argsstring>
        <name>fft_destroy</name>
        <param>
          <type><ref refid="structfft__config__t" kindref="compound">fft_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" line="80" column="6" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" bodystart="80" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="fft_8c_1aa0d01a17b65373896f2100bc63883ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fft_execute</definition>
        <argsstring>(fft_config_t *config)</argsstring>
        <name>fft_execute</name>
        <param>
          <type><ref refid="structfft__config__t" kindref="compound">fft_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" line="92" column="6" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" bodystart="92" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="fft_8c_1ab4cb498bf7686f0d200752cc5a6ea3d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fft</definition>
        <argsstring>(float *input, float *output, float *twiddle_factors, int n)</argsstring>
        <name>fft</name>
        <param>
          <type>float *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>twiddle_factors</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" line="104" column="6" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" bodystart="104" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="fft_8c_1a77e61a567a4628991819bbd4230b561f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ifft</definition>
        <argsstring>(float *input, float *output, float *twiddle_factors, int n)</argsstring>
        <name>ifft</name>
        <param>
          <type>float *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>twiddle_factors</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" line="129" column="6" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" bodystart="129" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="fft_8c_1a015dbb99fdfd93f586de17ddb23858ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rfft</definition>
        <argsstring>(float *x, float *y, float *twiddle_factors, int n)</argsstring>
        <name>rfft</name>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>twiddle_factors</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" line="149" column="6" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" bodystart="149" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="fft_8c_1a9d0c64b4392dd56fee766d29f01edccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void irfft</definition>
        <argsstring>(float *x, float *y, float *twiddle_factors, int n)</argsstring>
        <name>irfft</name>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>twiddle_factors</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" line="197" column="6" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" bodystart="197" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="fft_8c_1ab7790bb2c7fbd236af346a627c7c0ba9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fft_primitive</definition>
        <argsstring>(float *x, float *y, int n, int stride, float *twiddle_factors, int tw_stride)</argsstring>
        <name>fft_primitive</name>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>twiddle_factors</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tw_stride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" line="237" column="6" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" bodystart="237" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="fft_8c_1a9dc6fcc26d03fd8439ca431177a231cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void split_radix_fft</definition>
        <argsstring>(float *x, float *y, int n, int stride, float *twiddle_factors, int tw_stride)</argsstring>
        <name>split_radix_fft</name>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>twiddle_factors</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tw_stride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" line="325" column="6" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" bodystart="325" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="fft_8c_1af0de060a6248093afe01317a1684e734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ifft_primitive</definition>
        <argsstring>(float *input, float *output, int n, int stride, float *twiddle_factors, int tw_stride)</argsstring>
        <name>ifft_primitive</name>
        <param>
          <type>float *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>twiddle_factors</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tw_stride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" line="464" column="6" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" bodystart="464" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="fft_8c_1a12468a362aeaa6675a5c3c6b08a1af56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fft8</definition>
        <argsstring>(float *input, int stride_in, float *output, int stride_out)</argsstring>
        <name>fft8</name>
        <param>
          <type>float *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_in</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" line="500" column="13" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" bodystart="500" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="fft_8c_1aa6e142d986a6a8f5da0f1196ba01068b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fft4</definition>
        <argsstring>(float *input, int stride_in, float *output, int stride_out)</argsstring>
        <name>fft4</name>
        <param>
          <type>float *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_in</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" line="627" column="13" bodyfile="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c" bodystart="627" bodyend="653"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;fft.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TWO_PI<sp/>6.28318530</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USE_SPLIT_RADIX<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LARGE_BASE_CASE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><ref refid="structfft__config__t" kindref="compound">fft_config_t</ref>*<sp/>fft_init(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/>fft_type_t<sp/>type,<sp/>fft_direction_t<sp/>direction,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>input,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>output)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Prepare<sp/>an<sp/>FFT<sp/>of<sp/>correct<sp/>size<sp/>and<sp/>types.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>no<sp/>input<sp/>or<sp/>output<sp/>buffers<sp/>are<sp/>provided,<sp/>they<sp/>will<sp/>be<sp/>allocated.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/>m;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfft__config__t" kindref="compound">fft_config_t</ref>*<sp/>config<sp/>=<sp/>(<ref refid="structfft__config__t" kindref="compound">fft_config_t</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structfft__config__t" kindref="compound">fft_config_t</ref>));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>size<sp/>is<sp/>a<sp/>power<sp/>of<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((size<sp/>&amp;<sp/>(size<sp/>-<sp/>1))<sp/>!=<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>tests<sp/>if<sp/>size<sp/>is<sp/>a<sp/>power<sp/>of<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>config-&gt;flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>config-&gt;type<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>config-&gt;direction<sp/>=<sp/>direction;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>config-&gt;size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>and<sp/>precompute<sp/>twiddle<sp/>factors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>config-&gt;twiddle_factors<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(2<sp/>*<sp/>config-&gt;size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>two_pi_by_n<sp/>=<sp/>TWO_PI<sp/>/<sp/>config-&gt;size;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0,<sp/>m<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>config-&gt;size;<sp/>k++,<sp/>m<sp/>+=<sp/>2)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config-&gt;twiddle_factors[m]<sp/>=<sp/>cosf(two_pi_by_n<sp/>*<sp/>k);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config-&gt;twiddle_factors[m<sp/>+<sp/>1]<sp/>=<sp/>sinf(two_pi_by_n<sp/>*<sp/>k);<sp/></highlight><highlight class="comment">//<sp/>imag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>input<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config-&gt;input<sp/>=<sp/>input;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config-&gt;type<sp/>==<sp/>FFT_REAL)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config-&gt;input<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(config-&gt;size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config-&gt;type<sp/>==<sp/>FFT_COMPLEX)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config-&gt;input<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(2<sp/>*<sp/>config-&gt;size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config-&gt;flags<sp/>|=<sp/>FFT_OWN_INPUT_MEM;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config-&gt;input<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>output<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config-&gt;output<sp/>=<sp/>output;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config-&gt;type<sp/>==<sp/>FFT_REAL)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config-&gt;output<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(config-&gt;size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config-&gt;type<sp/>==<sp/>FFT_COMPLEX)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config-&gt;output<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(2<sp/>*<sp/>config-&gt;size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config-&gt;flags<sp/>|=<sp/>FFT_OWN_OUTPUT_MEM;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config-&gt;output<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>config;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fft_destroy(<ref refid="structfft__config__t" kindref="compound">fft_config_t</ref>*<sp/>config)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config-&gt;flags<sp/>&amp;<sp/>FFT_OWN_INPUT_MEM)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(config-&gt;input);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config-&gt;flags<sp/>&amp;<sp/>FFT_OWN_OUTPUT_MEM)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(config-&gt;output);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>free(config-&gt;twiddle_factors);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>free(config);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fft_execute(<ref refid="structfft__config__t" kindref="compound">fft_config_t</ref>*<sp/>config)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config-&gt;type<sp/>==<sp/>FFT_REAL<sp/>&amp;&amp;<sp/>config-&gt;direction<sp/>==<sp/>FFT_FORWARD)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rfft(config-&gt;input,<sp/>config-&gt;output,<sp/>config-&gt;twiddle_factors,<sp/>config-&gt;size);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config-&gt;type<sp/>==<sp/>FFT_REAL<sp/>&amp;&amp;<sp/>config-&gt;direction<sp/>==<sp/>FFT_BACKWARD)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>irfft(config-&gt;input,<sp/>config-&gt;output,<sp/>config-&gt;twiddle_factors,<sp/>config-&gt;size);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config-&gt;type<sp/>==<sp/>FFT_COMPLEX<sp/>&amp;&amp;<sp/>config-&gt;direction<sp/>==<sp/>FFT_FORWARD)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fft(config-&gt;input,<sp/>config-&gt;output,<sp/>config-&gt;twiddle_factors,<sp/>config-&gt;size);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config-&gt;type<sp/>==<sp/>FFT_COMPLEX<sp/>&amp;&amp;<sp/>config-&gt;direction<sp/>==<sp/>FFT_BACKWARD)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifft(config-&gt;input,<sp/>config-&gt;output,<sp/>config-&gt;twiddle_factors,<sp/>config-&gt;size);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fft(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>input,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>output,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>twiddle_factors,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Forward<sp/>fast<sp/>Fourier<sp/>transform</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>DIT,<sp/>radix-2,<sp/>out-of-place<sp/>implementation</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Parameters</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>----------</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>input<sp/>(float<sp/>*)</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>input<sp/>array<sp/>containing<sp/>the<sp/>complex<sp/>samples<sp/>with</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>real/imaginary<sp/>parts<sp/>interleaved<sp/>[Re(x0),<sp/>Im(x0),<sp/>...,<sp/>Re(x_n-1),<sp/>Im(x_n-1)]</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>output<sp/>(float<sp/>*)</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>output<sp/>array<sp/>containing<sp/>the<sp/>complex<sp/>samples<sp/>with</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>real/imaginary<sp/>parts<sp/>interleaved<sp/>[Re(x0),<sp/>Im(x0),<sp/>...,<sp/>Re(x_n-1),<sp/>Im(x_n-1)]</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>n<sp/>(int)</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>FFT<sp/>size,<sp/>should<sp/>be<sp/>a<sp/>power<sp/>of<sp/>2</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_SPLIT_RADIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>split_radix_fft(input,<sp/>output,<sp/>n,<sp/>2,<sp/>twiddle_factors,<sp/>2);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_primitive(input,<sp/>output,<sp/>n,<sp/>2,<sp/>twiddle_factors,<sp/>2);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ifft(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>input,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>output,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>twiddle_factors,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Inverse<sp/>fast<sp/>Fourier<sp/>transform</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>DIT,<sp/>radix-2,<sp/>out-of-place<sp/>implementation</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Parameters</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>----------</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>input<sp/>(float<sp/>*)</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>input<sp/>array<sp/>containing<sp/>the<sp/>complex<sp/>samples<sp/>with</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>real/imaginary<sp/>parts<sp/>interleaved<sp/>[Re(x0),<sp/>Im(x0),<sp/>...,<sp/>Re(x_n-1),<sp/>Im(x_n-1)]</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>output<sp/>(float<sp/>*)</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>output<sp/>array<sp/>containing<sp/>the<sp/>complex<sp/>samples<sp/>with</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>real/imaginary<sp/>parts<sp/>interleaved<sp/>[Re(x0),<sp/>Im(x0),<sp/>...,<sp/>Re(x_n-1),<sp/>Im(x_n-1)]</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>n<sp/>(int)</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>FFT<sp/>size,<sp/>should<sp/>be<sp/>a<sp/>power<sp/>of<sp/>2</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>ifft_primitive(input,<sp/>output,<sp/>n,<sp/>2,<sp/>twiddle_factors,<sp/>2);</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rfft(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>twiddle_factors,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>uses<sp/>the<sp/>two-for-the-price-of-one<sp/>strategy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_SPLIT_RADIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>split_radix_fft(x,<sp/>y,<sp/>n<sp/>/<sp/>2,<sp/>2,<sp/>twiddle_factors,<sp/>4);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_primitive(x,<sp/>y,<sp/>n<sp/>/<sp/>2,<sp/>2,<sp/>twiddle_factors,<sp/>4);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>apply<sp/>post<sp/>processing<sp/>to<sp/>recover<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>frequencies<sp/>of<sp/>the<sp/>real<sp/>FFT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>y[0];</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>y[0]<sp/>=<sp/>t<sp/>+<sp/>y[1];<sp/></highlight><highlight class="comment">//<sp/>DC<sp/>coefficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>y[1]<sp/>=<sp/>t<sp/>-<sp/>y[1];<sp/></highlight><highlight class="comment">//<sp/>Center<sp/>coefficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>post<sp/>processing<sp/>to<sp/>quarter<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>boils<sp/>down<sp/>to<sp/>taking<sp/>complex<sp/>conjugate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>y[n<sp/>/<sp/>2<sp/>+<sp/>1]<sp/>=<sp/>-y[n<sp/>/<sp/>2<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>process<sp/>all<sp/>the<sp/>other<sp/>frequencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>2;<sp/>k<sp/>&lt;<sp/>n<sp/>/<sp/>2;<sp/>k<sp/>+=<sp/>2)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xer,<sp/>xei,<sp/>xor_t,<sp/>xoi,<sp/>c,<sp/>s,<sp/>tr,<sp/>ti;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>twiddle_factors[k];</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>twiddle_factors[k<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>even<sp/>half<sp/>coefficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xer<sp/>=<sp/>0.5<sp/>*<sp/>(y[k]<sp/>+<sp/>y[n<sp/>-<sp/>k]);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xei<sp/>=<sp/>0.5<sp/>*<sp/>(y[k<sp/>+<sp/>1]<sp/>-<sp/>y[n<sp/>-<sp/>k<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>odd<sp/>half<sp/>coefficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xor_t<sp/>=<sp/>0.5<sp/>*<sp/>(y[k<sp/>+<sp/>1]<sp/>+<sp/>y[n<sp/>-<sp/>k<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xoi<sp/>=<sp/>-0.5<sp/>*<sp/>(y[k]<sp/>-<sp/>y[n<sp/>-<sp/>k]);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr<sp/>=<sp/>c<sp/>*<sp/>xor_t<sp/>+<sp/>s<sp/>*<sp/>xoi;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ti<sp/>=<sp/>-s<sp/>*<sp/>xor_t<sp/>+<sp/>c<sp/>*<sp/>xoi;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[k]<sp/>=<sp/>xer<sp/>+<sp/>tr;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[k<sp/>+<sp/>1]<sp/>=<sp/>xei<sp/>+<sp/>ti;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[n<sp/>-<sp/>k]<sp/>=<sp/>xer<sp/>-<sp/>tr;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[n<sp/>-<sp/>k<sp/>+<sp/>1]<sp/>=<sp/>-(xei<sp/>-<sp/>ti);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>irfft(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>twiddle_factors,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Destroys<sp/>content<sp/>of<sp/>input<sp/>vector</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>need<sp/>to<sp/>apply<sp/>a<sp/>pre-processing<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>x[0];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>x[0]<sp/>=<sp/>0.5<sp/>*<sp/>(t<sp/>+<sp/>x[1]);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>x[1]<sp/>=<sp/>0.5<sp/>*<sp/>(t<sp/>-<sp/>x[1]);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>x[n<sp/>/<sp/>2<sp/>+<sp/>1]<sp/>=<sp/>-x[n<sp/>/<sp/>2<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>2;<sp/>k<sp/>&lt;<sp/>n<sp/>/<sp/>2;<sp/>k<sp/>+=<sp/>2)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xer,<sp/>xei,<sp/>xor_t,<sp/>xoi,<sp/>c,<sp/>s,<sp/>tr,<sp/>ti;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>twiddle_factors[k];</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>twiddle_factors[k<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xer<sp/>=<sp/>0.5<sp/>*<sp/>(x[k]<sp/>+<sp/>x[n<sp/>-<sp/>k]);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr<sp/>=<sp/>0.5<sp/>*<sp/>(x[k]<sp/>-<sp/>x[n<sp/>-<sp/>k]);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xei<sp/>=<sp/>0.5<sp/>*<sp/>(x[k<sp/>+<sp/>1]<sp/>-<sp/>x[n<sp/>-<sp/>k<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ti<sp/>=<sp/>0.5<sp/>*<sp/>(x[k<sp/>+<sp/>1]<sp/>+<sp/>x[n<sp/>-<sp/>k<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xor_t<sp/>=<sp/>c<sp/>*<sp/>tr<sp/>-<sp/>s<sp/>*<sp/>ti;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xoi<sp/>=<sp/>s<sp/>*<sp/>tr<sp/>+<sp/>c<sp/>*<sp/>ti;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[k]<sp/>=<sp/>xer<sp/>-<sp/>xoi;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[k<sp/>+<sp/>1]<sp/>=<sp/>xor_t<sp/>+<sp/>xei;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[n<sp/>-<sp/>k]<sp/>=<sp/>xer<sp/>+<sp/>xoi;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[n<sp/>-<sp/>k<sp/>+<sp/>1]<sp/>=<sp/>xor_t<sp/>-<sp/>xei;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>ifft_primitive(x,<sp/>y,<sp/>n<sp/>/<sp/>2,<sp/>2,<sp/>twiddle_factors,<sp/>4);</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fft_primitive(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>twiddle_factors,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tw_stride)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>code<sp/>will<sp/>compute<sp/>the<sp/>FFT<sp/>of<sp/>the<sp/>input<sp/>vector<sp/>x</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>input<sp/>data<sp/>is<sp/>assumed<sp/>to<sp/>be<sp/>real/imag<sp/>interleaved</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>size<sp/>n<sp/>should<sp/>be<sp/>a<sp/>power<sp/>of<sp/>two</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>y<sp/>is<sp/>an<sp/>output<sp/>buffer<sp/>of<sp/>size<sp/>2n<sp/>to<sp/>accomodate<sp/>for<sp/>complex<sp/>numbers</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Forward<sp/>fast<sp/>Fourier<sp/>transform</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>DIT,<sp/>radix-2,<sp/>out-of-place<sp/>implementation</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>a<sp/>complex<sp/>FFT,<sp/>call<sp/>first<sp/>stage<sp/>as:</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>fft(x,<sp/>y,<sp/>n,<sp/>2,<sp/>2);</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Parameters</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>----------</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>x<sp/>(float<sp/>*)</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>input<sp/>array<sp/>containing<sp/>the<sp/>complex<sp/>samples<sp/>with</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>real/imaginary<sp/>parts<sp/>interleaved<sp/>[Re(x0),<sp/>Im(x0),<sp/>...,<sp/>Re(x_n-1),<sp/>Im(x_n-1)]</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>y<sp/>(float<sp/>*)</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>output<sp/>array<sp/>containing<sp/>the<sp/>complex<sp/>samples<sp/>with</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>real/imaginary<sp/>parts<sp/>interleaved<sp/>[Re(x0),<sp/>Im(x0),<sp/>...,<sp/>Re(x_n-1),<sp/>Im(x_n-1)]</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>n<sp/>(int)</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>FFT<sp/>size,<sp/>should<sp/>be<sp/>a<sp/>power<sp/>of<sp/>2</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>stride<sp/>(int)</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>elements<sp/>to<sp/>skip<sp/>between<sp/>two<sp/>successive<sp/>samples</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>tw_stride<sp/>(int)</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>elements<sp/>to<sp/>skip<sp/>between<sp/>two<sp/>successive<sp/>twiddle<sp/>factors</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LARGE_BASE_CASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>condition,<sp/>stop<sp/>at<sp/>n=8<sp/>to<sp/>avoid<sp/>one<sp/>trivial<sp/>recursion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fft8(x,<sp/>stride,<sp/>y,<sp/>2);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>condition,<sp/>stop<sp/>at<sp/>n=2<sp/>to<sp/>avoid<sp/>one<sp/>trivial<sp/>recursion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[0]<sp/>=<sp/>x[0]<sp/>+<sp/>x[stride];</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[1]<sp/>=<sp/>x[1]<sp/>+<sp/>x[stride<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[2]<sp/>=<sp/>x[0]<sp/>-<sp/>x[stride];</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[3]<sp/>=<sp/>x[1]<sp/>-<sp/>x[stride<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recursion<sp/>--<sp/>Decimation<sp/>In<sp/>Time<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_primitive(x,<sp/>y,<sp/>n<sp/>/<sp/>2,<sp/>2<sp/>*<sp/>stride,<sp/>twiddle_factors,<sp/>2<sp/>*<sp/>tw_stride);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>even<sp/>half</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_primitive(x<sp/>+<sp/>stride,<sp/>y<sp/>+<sp/>n,<sp/>n<sp/>/<sp/>2,<sp/>2<sp/>*<sp/>stride,<sp/>twiddle_factors,<sp/>2<sp/>*<sp/>tw_stride);<sp/></highlight><highlight class="comment">//<sp/>odd<sp/>half</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stitch<sp/>back<sp/>together</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>a<sp/>few<sp/>multiplications<sp/>in<sp/>the<sp/>first<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>y[0];</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>y[0]<sp/>=<sp/>t<sp/>+<sp/>y[n];</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>y[n]<sp/>=<sp/>t<sp/>-<sp/>y[n];</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>y[1];</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>y[1]<sp/>=<sp/>t<sp/>+<sp/>y[n<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>y[n<sp/>+<sp/>1]<sp/>=<sp/>t<sp/>-<sp/>y[n<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/>n<sp/>/<sp/>2;<sp/>k++)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x1r,<sp/>x1i,<sp/>x2r,<sp/>x2i,<sp/>c,<sp/>s;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>twiddle_factors[k<sp/>*<sp/>tw_stride];</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>twiddle_factors[k<sp/>*<sp/>tw_stride<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1r<sp/>=<sp/>y[2<sp/>*<sp/>k];</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1i<sp/>=<sp/>y[2<sp/>*<sp/>k<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2r<sp/>=<sp/>c<sp/>*<sp/>y[n<sp/>+<sp/>2<sp/>*<sp/>k]<sp/>+<sp/>s<sp/>*<sp/>y[n<sp/>+<sp/>2<sp/>*<sp/>k<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2i<sp/>=<sp/>-s<sp/>*<sp/>y[n<sp/>+<sp/>2<sp/>*<sp/>k]<sp/>+<sp/>c<sp/>*<sp/>y[n<sp/>+<sp/>2<sp/>*<sp/>k<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[2<sp/>*<sp/>k]<sp/>=<sp/>x1r<sp/>+<sp/>x2r;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[2<sp/>*<sp/>k<sp/>+<sp/>1]<sp/>=<sp/>x1i<sp/>+<sp/>x2i;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[n<sp/>+<sp/>2<sp/>*<sp/>k]<sp/>=<sp/>x1r<sp/>-<sp/>x2r;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[n<sp/>+<sp/>2<sp/>*<sp/>k<sp/>+<sp/>1]<sp/>=<sp/>x1i<sp/>-<sp/>x2i;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>split_radix_fft(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>twiddle_factors,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tw_stride)</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>code<sp/>will<sp/>compute<sp/>the<sp/>FFT<sp/>of<sp/>the<sp/>input<sp/>vector<sp/>x</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>input<sp/>data<sp/>is<sp/>assumed<sp/>to<sp/>be<sp/>real/imag<sp/>interleaved</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>size<sp/>n<sp/>should<sp/>be<sp/>a<sp/>power<sp/>of<sp/>two</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>y<sp/>is<sp/>an<sp/>output<sp/>buffer<sp/>of<sp/>size<sp/>2n<sp/>to<sp/>accomodate<sp/>for<sp/>complex<sp/>numbers</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Forward<sp/>fast<sp/>Fourier<sp/>transform</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Split-Radix</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>DIT,<sp/>radix-2,<sp/>out-of-place<sp/>implementation</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>a<sp/>complex<sp/>FFT,<sp/>call<sp/>first<sp/>stage<sp/>as:</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>fft(x,<sp/>y,<sp/>n,<sp/>2,<sp/>2);</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Parameters</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>----------</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>x<sp/>(float<sp/>*)</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>input<sp/>array<sp/>containing<sp/>the<sp/>complex<sp/>samples<sp/>with</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>real/imaginary<sp/>parts<sp/>interleaved<sp/>[Re(x0),<sp/>Im(x0),<sp/>...,<sp/>Re(x_n-1),<sp/>Im(x_n-1)]</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>y<sp/>(float<sp/>*)</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>output<sp/>array<sp/>containing<sp/>the<sp/>complex<sp/>samples<sp/>with</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>real/imaginary<sp/>parts<sp/>interleaved<sp/>[Re(x0),<sp/>Im(x0),<sp/>...,<sp/>Re(x_n-1),<sp/>Im(x_n-1)]</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>n<sp/>(int)</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>FFT<sp/>size,<sp/>should<sp/>be<sp/>a<sp/>power<sp/>of<sp/>2</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>stride<sp/>(int)</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>elements<sp/>to<sp/>skip<sp/>between<sp/>two<sp/>successive<sp/>samples</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>twiddle_factors<sp/>(float<sp/>*)</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>array<sp/>of<sp/>twiddle<sp/>factors</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>tw_stride<sp/>(int)</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>elements<sp/>to<sp/>skip<sp/>between<sp/>two<sp/>successive<sp/>twiddle<sp/>factors</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LARGE_BASE_CASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>condition,<sp/>stop<sp/>at<sp/>n=2<sp/>to<sp/>avoid<sp/>one<sp/>trivial<sp/>recursion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fft8(x,<sp/>stride,<sp/>y,<sp/>2);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fft4(x,<sp/>stride,<sp/>y,<sp/>2);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>condition,<sp/>stop<sp/>at<sp/>n=2<sp/>to<sp/>avoid<sp/>one<sp/>trivial<sp/>recursion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[0]<sp/>=<sp/>x[0]<sp/>+<sp/>x[stride];</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[1]<sp/>=<sp/>x[1]<sp/>+<sp/>x[stride<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[2]<sp/>=<sp/>x[0]<sp/>-<sp/>x[stride];</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[3]<sp/>=<sp/>x[1]<sp/>-<sp/>x[stride<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[0]<sp/>=<sp/>x[0];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[1]<sp/>=<sp/>x[1];</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recursion<sp/>--<sp/>Decimation<sp/>In<sp/>Time<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>split_radix_fft(x,<sp/>y,<sp/>n<sp/>/<sp/>2,<sp/>2<sp/>*<sp/>stride,<sp/>twiddle_factors,<sp/>2<sp/>*<sp/>tw_stride);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>split_radix_fft(x<sp/>+<sp/>stride,<sp/>y<sp/>+<sp/>n,<sp/>n<sp/>/<sp/>4,<sp/>4<sp/>*<sp/>stride,<sp/>twiddle_factors,<sp/>4<sp/>*<sp/>tw_stride);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>split_radix_fft(x<sp/>+<sp/>3<sp/>*<sp/>stride,<sp/>y<sp/>+<sp/>n<sp/>+<sp/>n<sp/>/<sp/>2,<sp/>n<sp/>/<sp/>4,<sp/>4<sp/>*<sp/>stride,<sp/>twiddle_factors,<sp/>4<sp/>*<sp/>tw_stride);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stitch<sp/>together<sp/>the<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>u1r,<sp/>u1i,<sp/>u2r,<sp/>u2i,<sp/>x1r,<sp/>x1i,<sp/>x2r,<sp/>x2i;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>save<sp/>a<sp/>few<sp/>multiplications<sp/>in<sp/>the<sp/>first<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>u1r<sp/>=<sp/>y[0];</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>u1i<sp/>=<sp/>y[1];</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>u2r<sp/>=<sp/>y[n<sp/>/<sp/>2];</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>u2i<sp/>=<sp/>y[n<sp/>/<sp/>2<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>x1r<sp/>=<sp/>y[n];</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>x1i<sp/>=<sp/>y[n<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>x2r<sp/>=<sp/>y[n<sp/>/<sp/>2<sp/>+<sp/>n];</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>x2i<sp/>=<sp/>y[n<sp/>/<sp/>2<sp/>+<sp/>n<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>x1r<sp/>+<sp/>x2r;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>y[0]<sp/>=<sp/>u1r<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>y[n]<sp/>=<sp/>u1r<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>x1i<sp/>+<sp/>x2i;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>y[1]<sp/>=<sp/>u1i<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>y[n<sp/>+<sp/>1]<sp/>=<sp/>u1i<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>x2i<sp/>-<sp/>x1i;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>y[n<sp/>/<sp/>2]<sp/>=<sp/>u2r<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>y[n<sp/>+<sp/>n<sp/>/<sp/>2]<sp/>=<sp/>u2r<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>x1r<sp/>-<sp/>x2r;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>y[n<sp/>/<sp/>2<sp/>+<sp/>1]<sp/>=<sp/>u2i<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>y[n<sp/>+<sp/>n<sp/>/<sp/>2<sp/>+<sp/>1]<sp/>=<sp/>u2i<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/>n<sp/>/<sp/>4;<sp/>k++)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>u1r,<sp/>u1i,<sp/>u2r,<sp/>u2i,<sp/>x1r,<sp/>x1i,<sp/>x2r,<sp/>x2i,<sp/>c1,<sp/>s1,<sp/>c2,<sp/>s2;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>twiddle_factors[k<sp/>*<sp/>tw_stride];</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>twiddle_factors[k<sp/>*<sp/>tw_stride<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>twiddle_factors[3<sp/>*<sp/>k<sp/>*<sp/>tw_stride];</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>twiddle_factors[3<sp/>*<sp/>k<sp/>*<sp/>tw_stride<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u1r<sp/>=<sp/>y[2<sp/>*<sp/>k];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u1i<sp/>=<sp/>y[2<sp/>*<sp/>k<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u2r<sp/>=<sp/>y[2<sp/>*<sp/>k<sp/>+<sp/>n<sp/>/<sp/>2];</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u2i<sp/>=<sp/>y[2<sp/>*<sp/>k<sp/>+<sp/>n<sp/>/<sp/>2<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1r<sp/>=<sp/>c1<sp/>*<sp/>y[n<sp/>+<sp/>2<sp/>*<sp/>k]<sp/>+<sp/>s1<sp/>*<sp/>y[n<sp/>+<sp/>2<sp/>*<sp/>k<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1i<sp/>=<sp/>-s1<sp/>*<sp/>y[n<sp/>+<sp/>2<sp/>*<sp/>k]<sp/>+<sp/>c1<sp/>*<sp/>y[n<sp/>+<sp/>2<sp/>*<sp/>k<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2r<sp/>=<sp/>c2<sp/>*<sp/>y[n<sp/>/<sp/>2<sp/>+<sp/>n<sp/>+<sp/>2<sp/>*<sp/>k]<sp/>+<sp/>s2<sp/>*<sp/>y[n<sp/>/<sp/>2<sp/>+<sp/>n<sp/>+<sp/>2<sp/>*<sp/>k<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2i<sp/>=<sp/>-s2<sp/>*<sp/>y[n<sp/>/<sp/>2<sp/>+<sp/>n<sp/>+<sp/>2<sp/>*<sp/>k]<sp/>+<sp/>c2<sp/>*<sp/>y[n<sp/>/<sp/>2<sp/>+<sp/>n<sp/>+<sp/>2<sp/>*<sp/>k<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>x1r<sp/>+<sp/>x2r;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[2<sp/>*<sp/>k]<sp/>=<sp/>u1r<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[2<sp/>*<sp/>k<sp/>+<sp/>n]<sp/>=<sp/>u1r<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>x1i<sp/>+<sp/>x2i;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[2<sp/>*<sp/>k<sp/>+<sp/>1]<sp/>=<sp/>u1i<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[2<sp/>*<sp/>k<sp/>+<sp/>n<sp/>+<sp/>1]<sp/>=<sp/>u1i<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>x2i<sp/>-<sp/>x1i;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[2<sp/>*<sp/>k<sp/>+<sp/>n<sp/>/<sp/>2]<sp/>=<sp/>u2r<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[2<sp/>*<sp/>k<sp/>+<sp/>n<sp/>+<sp/>n<sp/>/<sp/>2]<sp/>=<sp/>u2r<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>x1r<sp/>-<sp/>x2r;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[2<sp/>*<sp/>k<sp/>+<sp/>n<sp/>/<sp/>2<sp/>+<sp/>1]<sp/>=<sp/>u2i<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[2<sp/>*<sp/>k<sp/>+<sp/>n<sp/>+<sp/>n<sp/>/<sp/>2<sp/>+<sp/>1]<sp/>=<sp/>u2i<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ifft_primitive(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>input,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>twiddle_factors,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tw_stride)</highlight></codeline>
<codeline lineno="465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_SPLIT_RADIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>split_radix_fft(input,<sp/>output,<sp/>n,<sp/>stride,<sp/>twiddle_factors,<sp/>tw_stride);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_primitive(input,<sp/>output,<sp/>n,<sp/>stride,<sp/>twiddle_factors,<sp/>tw_stride);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ks;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ns<sp/>=<sp/>n<sp/>*<sp/>stride;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reverse<sp/>all<sp/>coefficients<sp/>from<sp/>1<sp/>to<sp/>n<sp/>/<sp/>2<sp/>-<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ks<sp/>=<sp/>stride;<sp/>ks<sp/>&lt;<sp/>ns<sp/>/<sp/>2;<sp/>ks<sp/>+=<sp/>stride)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>output[ks];</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[ks]<sp/>=<sp/>output[ns<sp/>-<sp/>ks];</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[ns<sp/>-<sp/>ks]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>output[ks<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[ks<sp/>+<sp/>1]<sp/>=<sp/>output[ns<sp/>-<sp/>ks<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[ns<sp/>-<sp/>ks<sp/>+<sp/>1]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>normalization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>norm<sp/>=<sp/>1.<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ks<sp/>=<sp/>0;<sp/>ks<sp/>&lt;<sp/>ns;<sp/>ks<sp/>+=<sp/>stride)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[ks]<sp/>*=<sp/>norm;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[ks<sp/>+<sp/>1]<sp/>*=<sp/>norm;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fft8(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>input,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_in,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_out)</highlight></codeline>
<codeline lineno="501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Unrolled<sp/>implementation<sp/>of<sp/>FFT8<sp/>for<sp/>a<sp/>little<sp/>more<sp/>performance</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a0r,<sp/>a1r,<sp/>a2r,<sp/>a3r,<sp/>a4r,<sp/>a5r,<sp/>a6r,<sp/>a7r;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a0i,<sp/>a1i,<sp/>a2i,<sp/>a3i,<sp/>a4i,<sp/>a5i,<sp/>a6i,<sp/>a7i;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b0r,<sp/>b1r,<sp/>b2r,<sp/>b3r,<sp/>b4r,<sp/>b5r,<sp/>b6r,<sp/>b7r;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b0i,<sp/>b1i,<sp/>b2i,<sp/>b3i,<sp/>b4i,<sp/>b5i,<sp/>b6i,<sp/>b7i;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sin_pi_4<sp/>=<sp/>0.7071067812;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>a0r<sp/>=<sp/>input[0];</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>a0i<sp/>=<sp/>input[1];</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>a1r<sp/>=<sp/>input[stride_in];</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>a1i<sp/>=<sp/>input[stride_in<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>a2r<sp/>=<sp/>input[2<sp/>*<sp/>stride_in];</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>a2i<sp/>=<sp/>input[2<sp/>*<sp/>stride_in<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>a3r<sp/>=<sp/>input[3<sp/>*<sp/>stride_in];</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>a3i<sp/>=<sp/>input[3<sp/>*<sp/>stride_in<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>a4r<sp/>=<sp/>input[4<sp/>*<sp/>stride_in];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>a4i<sp/>=<sp/>input[4<sp/>*<sp/>stride_in<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>a5r<sp/>=<sp/>input[5<sp/>*<sp/>stride_in];</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>a5i<sp/>=<sp/>input[5<sp/>*<sp/>stride_in<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>a6r<sp/>=<sp/>input[6<sp/>*<sp/>stride_in];</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>a6i<sp/>=<sp/>input[6<sp/>*<sp/>stride_in<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>a7r<sp/>=<sp/>input[7<sp/>*<sp/>stride_in];</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>a7i<sp/>=<sp/>input[7<sp/>*<sp/>stride_in<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stage<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>b0r<sp/>=<sp/>a0r<sp/>+<sp/>a4r;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>b0i<sp/>=<sp/>a0i<sp/>+<sp/>a4i;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>b1r<sp/>=<sp/>a1r<sp/>+<sp/>a5r;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>b1i<sp/>=<sp/>a1i<sp/>+<sp/>a5i;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>b2r<sp/>=<sp/>a2r<sp/>+<sp/>a6r;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>b2i<sp/>=<sp/>a2i<sp/>+<sp/>a6i;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>b3r<sp/>=<sp/>a3r<sp/>+<sp/>a7r;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>b3i<sp/>=<sp/>a3i<sp/>+<sp/>a7i;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>b4r<sp/>=<sp/>a0r<sp/>-<sp/>a4r;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>b4i<sp/>=<sp/>a0i<sp/>-<sp/>a4i;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>b5r<sp/>=<sp/>a1r<sp/>-<sp/>a5r;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>b5i<sp/>=<sp/>a1i<sp/>-<sp/>a5i;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>W_8^1<sp/>=<sp/>1/sqrt(2)<sp/>-<sp/>j<sp/>/<sp/>sqrt(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>b5r<sp/>+<sp/>b5i;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>b5i<sp/>=<sp/>(b5i<sp/>-<sp/>b5r)<sp/>*<sp/>sin_pi_4;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>b5r<sp/>=<sp/>t<sp/>*<sp/>sin_pi_4;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>W_8^2<sp/>=<sp/>-j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>b6r<sp/>=<sp/>a2i<sp/>-<sp/>a6i;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>b6i<sp/>=<sp/>a6r<sp/>-<sp/>a2r;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>b7r<sp/>=<sp/>a3r<sp/>-<sp/>a7r;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>b7i<sp/>=<sp/>a3i<sp/>-<sp/>a7i;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>W_8^3<sp/>=<sp/>-1<sp/>/<sp/>sqrt(2)<sp/>+<sp/>j<sp/>/<sp/>sqrt(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>sin_pi_4<sp/>*<sp/>(b7i<sp/>-<sp/>b7r);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>b7i<sp/>=<sp/>-(b7r<sp/>+<sp/>b7i)<sp/>*<sp/>sin_pi_4;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>b7r<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stage<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>a0r<sp/>=<sp/>b0r<sp/>+<sp/>b2r;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>a0i<sp/>=<sp/>b0i<sp/>+<sp/>b2i;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>a1r<sp/>=<sp/>b1r<sp/>+<sp/>b3r;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>a1i<sp/>=<sp/>b1i<sp/>+<sp/>b3i;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>a2r<sp/>=<sp/>b0r<sp/>-<sp/>b2r;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>a2i<sp/>=<sp/>b0i<sp/>-<sp/>b2i;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>a3r<sp/>=<sp/>b1i<sp/>-<sp/>b3i;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>a3i<sp/>=<sp/>b3r<sp/>-<sp/>b1r;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>a4r<sp/>=<sp/>b4r<sp/>+<sp/>b6r;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>a4i<sp/>=<sp/>b4i<sp/>+<sp/>b6i;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>a5r<sp/>=<sp/>b5r<sp/>+<sp/>b7r;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>a5i<sp/>=<sp/>b5i<sp/>+<sp/>b7i;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>a6r<sp/>=<sp/>b4r<sp/>-<sp/>b6r;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>a6i<sp/>=<sp/>b4i<sp/>-<sp/>b6i;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>a7r<sp/>=<sp/>b5i<sp/>-<sp/>b7i;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>a7i<sp/>=<sp/>b7r<sp/>-<sp/>b5r;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stage<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X[0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>output[0]<sp/>=<sp/>a0r<sp/>+<sp/>a1r;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>output[1]<sp/>=<sp/>a0i<sp/>+<sp/>a1i;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X[4]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>output[4<sp/>*<sp/>stride_out]<sp/>=<sp/>a0r<sp/>-<sp/>a1r;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>output[4<sp/>*<sp/>stride_out<sp/>+<sp/>1]<sp/>=<sp/>a0i<sp/>-<sp/>a1i;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X[2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>output[2<sp/>*<sp/>stride_out]<sp/>=<sp/>a2r<sp/>+<sp/>a3r;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>output[2<sp/>*<sp/>stride_out<sp/>+<sp/>1]<sp/>=<sp/>a2i<sp/>+<sp/>a3i;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X[6]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>output[6<sp/>*<sp/>stride_out]<sp/>=<sp/>a2r<sp/>-<sp/>a3r;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>output[6<sp/>*<sp/>stride_out<sp/>+<sp/>1]<sp/>=<sp/>a2i<sp/>-<sp/>a3i;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X[1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>output[stride_out]<sp/>=<sp/>a4r<sp/>+<sp/>a5r;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>output[stride_out<sp/>+<sp/>1]<sp/>=<sp/>a4i<sp/>+<sp/>a5i;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X[5]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>output[5<sp/>*<sp/>stride_out]<sp/>=<sp/>a4r<sp/>-<sp/>a5r;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>output[5<sp/>*<sp/>stride_out<sp/>+<sp/>1]<sp/>=<sp/>a4i<sp/>-<sp/>a5i;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X[3]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>output[3<sp/>*<sp/>stride_out]<sp/>=<sp/>a6r<sp/>+<sp/>a7r;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>output[3<sp/>*<sp/>stride_out<sp/>+<sp/>1]<sp/>=<sp/>a6i<sp/>+<sp/>a7i;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X[7]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>output[7<sp/>*<sp/>stride_out]<sp/>=<sp/>a6r<sp/>-<sp/>a7r;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>output[7<sp/>*<sp/>stride_out<sp/>+<sp/>1]<sp/>=<sp/>a6i<sp/>-<sp/>a7i;</highlight></codeline>
<codeline lineno="625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fft4(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>input,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_in,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_out)</highlight></codeline>
<codeline lineno="628"><highlight class="normal">{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Unrolled<sp/>implementation<sp/>of<sp/>FFT4<sp/>for<sp/>a<sp/>little<sp/>more<sp/>performance</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t1,<sp/>t2;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>input[0]<sp/>+<sp/>input[2<sp/>*<sp/>stride_in];</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>input[stride_in]<sp/>+<sp/>input[3<sp/>*<sp/>stride_in];</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>output[0]<sp/>=<sp/>t1<sp/>+<sp/>t2;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>output[2<sp/>*<sp/>stride_out]<sp/>=<sp/>t1<sp/>-<sp/>t2;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>input[1]<sp/>+<sp/>input[2<sp/>*<sp/>stride_in<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>input[stride_in<sp/>+<sp/>1]<sp/>+<sp/>input[3<sp/>*<sp/>stride_in<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>output[1]<sp/>=<sp/>t1<sp/>+<sp/>t2;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>output[2<sp/>*<sp/>stride_out<sp/>+<sp/>1]<sp/>=<sp/>t1<sp/>-<sp/>t2;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>input[0]<sp/>-<sp/>input[2<sp/>*<sp/>stride_in];</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>input[stride_in<sp/>+<sp/>1]<sp/>-<sp/>input[3<sp/>*<sp/>stride_in<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>output[stride_out]<sp/>=<sp/>t1<sp/>+<sp/>t2;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>output[3<sp/>*<sp/>stride_out]<sp/>=<sp/>t1<sp/>-<sp/>t2;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>input[1]<sp/>-<sp/>input[2<sp/>*<sp/>stride_in<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>input[3<sp/>*<sp/>stride_in]<sp/>-<sp/>input[stride_in];</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>output[stride_out<sp/>+<sp/>1]<sp/>=<sp/>t1<sp/>+<sp/>t2;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>output[3<sp/>*<sp/>stride_out<sp/>+<sp/>1]<sp/>=<sp/>t1<sp/>-<sp/>t2;</highlight></codeline>
<codeline lineno="653"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/fft/fft.c"/>
  </compounddef>
</doxygen>
