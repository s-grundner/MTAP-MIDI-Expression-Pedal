.TH "C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/midi/midi.h" 3 "Wed Mar 8 2023" "Gitcon" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/Smon/source/MTAP-MIDI-Guitar-Converter/firmware/MIDI-Testing/lib/midi/midi.h \- midi driver for esp32  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include 'driver/gpio\&.h'\fP
.br
\fC#include 'driver/uart\&.h'\fP
.br
\fC#include 'esp_log\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBmidi_message_t\fP"
.br
.RI "MIDI Message\&. "
.ti -1c
.RI "struct \fBmidi_config_t\fP"
.br
.RI "MIDI UART Configuration\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBMIDI_LOG_LEVEL\fP   ESP_LOG_ERROR"
.br
.ti -1c
.RI "#define \fBMIDI_BYTE_SIZE_DEFAULT\fP   3"
.br
.ti -1c
.RI "#define \fBMIDI_BYTE_SIZE_SHORT\fP   2"
.br
.ti -1c
.RI "#define \fBMIDI_PITCH_BEND_MIN\fP   (0)"
.br
.ti -1c
.RI "#define \fBMIDI_PITCH_BEND_MAX\fP   (16383)"
.br
.ti -1c
.RI "#define \fBMIDI_PITCH_BEND_CENTER\fP   (8192)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBmidi_context_t\fP * \fBmidi_handle_t\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBmidi_status_t\fP { \fBMIDI_STATUS_NOTE_OFF\fP = 0x80, \fBMIDI_STATUS_NOTE_ON\fP = 0x90, \fBMIDI_STATUS_POLYPHONIC_KEY_PRESSURE\fP = 0xA0, \fBMIDI_STATUS_CONTROL_CHANGE\fP = 0xB0, \fBMIDI_STATUS_PROGRAM_CHANGE\fP = 0xC0, \fBMIDI_STATUS_CHANNEL_PRESSURE\fP = 0xD0, \fBMIDI_STATUS_PITCH_BEND\fP = 0xE0 }"
.br
.RI "MIDI Status Bytes\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "esp_err_t \fBmidi_init\fP (\fBmidi_handle_t\fP *out_handle, \fBmidi_config_t\fP *out_cfg)"
.br
.RI "initializes MIDI and allocates driver resources "
.ti -1c
.RI "esp_err_t \fBmidi_exit\fP (\fBmidi_handle_t\fP midi_handle)"
.br
.RI "Exits MIDI and frees all resources\&. "
.ti -1c
.RI "esp_err_t \fBmidi_write\fP (\fBmidi_handle_t\fP midi_handle, \fBmidi_message_t\fP *msg)"
.br
.RI "Writes MIDI Message to UART\&. "
.ti -1c
.RI "esp_err_t \fBmidi_read\fP (\fBmidi_handle_t\fP midi_handle, \fBmidi_message_t\fP *msg, TickType_t timeout)"
.br
.RI "Reads MIDI Message from UART\&. "
.ti -1c
.RI "\fBmidi_message_t\fP \fBnote_off\fP (uint8_t channel, uint8_t key_num, uint8_t velocity)"
.br
.ti -1c
.RI "\fBmidi_message_t\fP \fBnote_on\fP (uint8_t channel, uint8_t key_num, uint8_t velocity)"
.br
.ti -1c
.RI "\fBmidi_message_t\fP \fBpoly_key_pressure\fP (uint8_t channel, uint8_t key_num, uint8_t value)"
.br
.ti -1c
.RI "\fBmidi_message_t\fP \fBctrl_change\fP (uint8_t channel, uint8_t controller_num, uint8_t value)"
.br
.ti -1c
.RI "\fBmidi_message_t\fP \fBprg_change\fP (uint8_t channel, uint8_t program)"
.br
.ti -1c
.RI "\fBmidi_message_t\fP \fBchannel_pressure\fP (uint8_t channel, uint8_t value)"
.br
.ti -1c
.RI "\fBmidi_message_t\fP \fBpitch_bend\fP (uint8_t channel, uint16_t value)"
.br
.in -1c
.SH "Detailed Description"
.PP 
midi driver for esp32 


.PP
\fBAuthor\fP
.RS 4
@s-grundner 
.RE
.PP
\fBVersion\fP
.RS 4
0\&.1 
.RE
.PP
\fBDate\fP
.RS 4
2022-12-23
.RE
.PP
\fBCopyright\fP
.RS 4
Copyright (c) 2022 
.RE
.PP

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBmidi_status_t\fP"

.PP
MIDI Status Bytes\&. 
.PP
\fBParameters\fP
.RS 4
\fIMIDI_STATUS_NOTE_OFF\fP 0x80, requires param2 
.br
\fIMIDI_STATUS_NOTE_ON\fP 0x90, requires param2 
.br
\fIMIDI_STATUS_POLYPHONIC_KEY_PRESSURE\fP 0xA0, param2 is not used 
.br
\fIMIDI_STATUS_CONTROL_CHANGE\fP 0xB0, requires param2 
.br
\fIMIDI_STATUS_PROGRAM_CHANGE\fP 0xC0, param2 is is not used 
.br
\fIMIDI_STATUS_CHANNEL_PRESSURE\fP 0xD0, param2 is is not used 
.br
\fIMIDI_STATUS_PITCH_BEND\fP 0xE0, requires param2 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "esp_err_t midi_exit (\fBmidi_handle_t\fP midi_handle)"

.PP
Exits MIDI and frees all resources\&. 
.PP
\fBParameters\fP
.RS 4
\fImidi_handle\fP MIDI Handle to be freed 
.RE
.PP
\fBReturns\fP
.RS 4
esp_err_t 
.RE
.PP

.SS "esp_err_t midi_init (\fBmidi_handle_t\fP * out_handle, \fBmidi_config_t\fP * out_cfg)"

.PP
initializes MIDI and allocates driver resources 
.PP
\fBParameters\fP
.RS 4
\fIout_handle\fP MIDI Handle to be initialized 
.br
\fIout_cfg\fP MIDI Configuration 
.RE
.PP
\fBReturns\fP
.RS 4
esp_err_t 
.RE
.PP

.SS "esp_err_t midi_read (\fBmidi_handle_t\fP midi_handle, \fBmidi_message_t\fP * msg, TickType_t timeout)"

.PP
Reads MIDI Message from UART\&. 
.PP
\fBParameters\fP
.RS 4
\fImidi_handle\fP MIDI Handle to pass parameters 
.br
\fImsg\fP MIDI Message to be read 
.RE
.PP
\fBReturns\fP
.RS 4
esp_err_t 
.RE
.PP

.SS "esp_err_t midi_write (\fBmidi_handle_t\fP midi_handle, \fBmidi_message_t\fP * msg)"

.PP
Writes MIDI Message to UART\&. 
.PP
\fBParameters\fP
.RS 4
\fImidi_handle\fP MIDI Handle to pass parameters 
.br
\fImsg\fP MIDI Message to be sent 
.RE
.PP
\fBReturns\fP
.RS 4
esp_err_t 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Gitcon from the source code\&.
